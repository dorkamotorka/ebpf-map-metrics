// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadCount returns the embedded CollectionSpec for count.
func loadCount() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_CountBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load count: %w", err)
	}

	return spec, err
}

// loadCountObjects loads count and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*countObjects
//	*countPrograms
//	*countMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadCountObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadCount()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// countSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type countSpecs struct {
	countProgramSpecs
	countMapSpecs
}

// countSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type countProgramSpecs struct {
	DumpBpfMap *ebpf.ProgramSpec `ebpf:"dump_bpf_map"`
}

// countMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type countMapSpecs struct {
}

// countObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadCountObjects or ebpf.CollectionSpec.LoadAndAssign.
type countObjects struct {
	countPrograms
	countMaps
}

func (o *countObjects) Close() error {
	return _CountClose(
		&o.countPrograms,
		&o.countMaps,
	)
}

// countMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadCountObjects or ebpf.CollectionSpec.LoadAndAssign.
type countMaps struct {
}

func (m *countMaps) Close() error {
	return _CountClose()
}

// countPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadCountObjects or ebpf.CollectionSpec.LoadAndAssign.
type countPrograms struct {
	DumpBpfMap *ebpf.Program `ebpf:"dump_bpf_map"`
}

func (p *countPrograms) Close() error {
	return _CountClose(
		p.DumpBpfMap,
	)
}

func _CountClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed count_bpfel.o
var _CountBytes []byte
